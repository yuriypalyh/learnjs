/*
Ми можемо призначити змінній будь-який тип даних. 
Наприклад, в один момент змінна може бути рядком, а в інший – числом:
*/
let message = "привіт";
message = 123456;
/*
Мови програмування, які дають змогу таке робити, називаються “динамічно типізованими”. 
Мається на увазі, що типи даних визначені, але змінні не прив’язанні до жодного типу.
*/
//TODO: number
let n = 123;
n = 12.345;

//TODO: string
let str = "Привіт";
let str2 = 'Одинарні лапки також дозволяються';
let phrase = `так можна вставляти ${str}`;
/*
У JavaScript є три типи лапок:
Подвійні лапки: "Привіт".
Одинарні лапки: 'Привіт'.
Зворотні лапки: `Привіт`.
*/
let someUserName = "Іван";
// вбудована змінна
alert(`Привіт, ${someUserName}е!`); // Привіт, Іване!
// вбудований вираз
alert(`результат: ${1 + 2}`); // результат: 3

//TODO: boolean/logical type
let isGreater = 4 > 1;
alert(isGreater); // true (результат порівняння — "так")

//TODO: об’єкти (object) та символи (symbol)
/*
1) Тип object є особливим типом.
Усі інші типи називаються “примітивами”, тому що їхні значення можуть містити тільки один елемент: 
це може бути рядок, число, або будь-що інше. 
В об’єктах же зберігаються колекції даних і більш складні структури.
2) Тип symbol використовується для створення унікальних ідентифікаторів в об’єктах.
*/

//TODO: оператор typeof
typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"  (1)
typeof null // "object"  (2)
typeof alert // "function"  (3)

//TODO: ex 
let nameOfUser = "Ілля";
// вираз — число 1
alert( `привіт ${1}` ); // привіт 1
// вираз є рядком "name"
alert( `привіт ${"nameOfUser FF gg"}` ); // привіт nameOfUser FF gg
// вираз є змінною, яка вбудовується
alert( `привіт ${nameOfUser}` ); // привіт Ілля